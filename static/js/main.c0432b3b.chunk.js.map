{"version":3,"sources":["lib/fingers.ts","components/hand.tsx","components/hands.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fingerIndexes","fingerPaths","Thumb","Index","Middle","Ring","Little","fingers","Object","keys","rightStyle","transform","circleX","Hand","props","values","fingerPointing","isRight","onClickProp","onClick","flipHand","indexes","isDisabled","index","undefined","isPointing","value","viewBox","xmlns","fillRule","clipRule","strokeLinecap","strokeLinejoin","strokeMiterlimit","map","_","fName","onCircleClick","onMouseDown","cx","cy","r","className","opacity","cursor","stroke","style","d","fill","strokeOpacity","vIndex","fingerName","nameFromIndex","paths","pointing","closed","onFingerClick","cn","String","x","y","fontFamily","fontSize","textAnchor","dominantBaseline","pointerEvents","Hands","showInput","rightToLeft","yours","maxValue","useState","total","setTotal","handCount","fingerCount","toString","length","valueToFingerCount","Math","ceil","valueToHandCount","addValue","t","newValue","hands","Array","i","setDirection","array","reverse","handIndex","v","type","onChange","e","Number","target","min","max","App","params","URLSearchParams","document","location","search","get","documentElement","setProperty","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c0432b3b.chunk.js","sourcesContent":["export type Fingers = [\n  boolean,\n  boolean,\n  boolean,\n  boolean,\n  boolean,\n  boolean,\n  boolean,\n  boolean,\n  boolean,\n  boolean\n];\n\nexport type FingerNames = \"Thumb\" | \"Index\" | \"Middle\" | \"Ring\" | \"Little\";\n\nconst fingerIndexes: Array<FingerNames> = [\n  \"Thumb\",\n  \"Index\",\n  \"Middle\",\n  \"Ring\",\n  \"Little\",\n];\n\nexport const nameFromIndex = (index: number) => {\n  const indexOnHand = index % 5;\n  return fingerIndexes[indexOnHand];\n};\n\nexport const valueToFingers = (value: number) => {\n  const binary = value.toString(2);\n\n  const values = binary.split(\"\").map((v) => v === \"1\");\n  return values;\n};\n\nexport const valueToFingerCount = (value: number) => {\n  return value.toString(2).length;\n};\n\nexport const valueToHandCount = (value: number) => {\n  const fingerCount = valueToFingerCount(value);\n  return Math.ceil(fingerCount / 5);\n};\n\nexport const valuesForHand = (index: number) => {\n  return [0, 1, 2, 3, 4].map((v) => 2 ** (v + index * 5));\n};\n","import React, { Fragment, ReactElement } from \"react\";\nimport { FingerNames, nameFromIndex } from \"../lib/fingers\";\nimport \"./hand.css\";\nimport cn from \"classnames\";\n\nconst fingerPaths: Record<FingerNames, [string, string]> = {\n  Thumb: [\n    \"M73.935 316.755a415.412 415.412 0 00-4.526-4.459 109.184 109.184 0 01-30.405-53.451c-5.355-22.6-11.497-48.632-12.534-53.028a5.012 5.012 0 00-.468-1.229L7.435 170.239a1.505 1.505 0 01-.023-1.386 1.505 1.505 0 011.121-.814h.004a30.123 30.123 0 0128.568 11.716l10.108 13.477 19.139 22.591s62.451 14.252 62.451 60.087\",\n    \"M73.935 316.763a662.15 662.15 0 00-1.2-1.196 109.207 109.207 0 01-31.222-62.27c-.805-5.676-1.614-11.41-2.375-16.801a27.81 27.81 0 0124.621-31.539l12.172-1.283 17.329-2.599a2.765 2.765 0 013.115 2.156v.001a26.448 26.448 0 01-11.127 27.503l-12.504 8.388s56.059-9.04 56.059 36.795\",\n  ],\n  Index: [\n    \"M66.631 187.095L59.66 74.688a5.001 5.001 0 013.58-5.106l7.805-2.295a4.996 4.996 0 016.335 3.932l18.129 103.337.033.116\",\n    \"M101.336 167.973a10 10 0 00-5.256-7.887l-5.279-2.81a14.999 14.999 0 00-19.082 4.284l-4.349 5.843a9.999 9.999 0 00-1.877 7.393l4.922 34.251 8.316 21.993a9.999 9.999 0 009.752 6.455l5.652-.225a10.001 10.001 0 009.543-8.907c.827-6.573 1.733-15.409 1.278-20.874-.807-9.694-2.705-29.872-3.62-39.516z\",\n  ],\n  Middle: [\n    \"M105.585 172.312l3.675-115.763a4.999 4.999 0 014.997-4.841h10.319a5 5 0 014.997 4.835l3.754 113.782\",\n    \"M138.899 168.375a9.998 9.998 0 00-3.482-7.914l-5.547-4.76a15 15 0 00-19.256-.234l-5.445 4.446a10.004 10.004 0 00-3.645 8.524c.733 9.498 2.322 29.496 3.432 39.052.662 5.69 1.994 16.175 2.959 23.689a10 10 0 009.948 8.738l6.687-.019a9.999 9.999 0 009.794-8.123c1.536-7.348 3.54-17.826 3.564-23.267.047-10.46.685-30.863.991-40.132z\",\n  ],\n  Ring: [\n    \"M142.179 171.059l15.403-103.46a4.999 4.999 0 016.09-4.131l7.72 1.816a5 5 0 013.852 5.035l-3.632 108.116\",\n    \"M176.527 176.598a10.002 10.002 0 00-2.811-9.123l-6.713-6.567a14.999 14.999 0 00-17.364-2.609l-5.174 2.668a10 10 0 00-5.405 8.385c-.519 9.828-1.464 29.683-1.152 39.155.167 5.071.637 14.639 1.007 21.893a10 10 0 0010.018 9.512l4.814-.015a9.998 9.998 0 009.572-7.208c2.074-6.985 5.064-17.281 6.246-22.534 1.865-8.288 5.243-24.991 6.962-33.557z\",\n  ],\n  Little: [\n    \"M179.955 182.04l26.739-73.594a5 5 0 016.381-3.001l5.127 1.831a5 5 0 013.19 5.833l-19.136 82.947\",\n    \"M204.441 193.204c.861-2.278.862-4.791.002-7.07l-3.318-8.785a11.072 11.072 0 00-11.294-7.12l-4.961.42a10 10 0 00-8.922 7.816c-2.006 8.944-5.278 23.962-6.383 31.69-.552 3.862-1.216 10.169-1.758 15.694a9.997 9.997 0 009.976 11.053c.785-.001 1.56-.003 2.305-.006a10 10 0 009.076-5.875l5.927-13.09 9.35-24.727z\",\n  ],\n};\n\nconst fingers = Object.keys(fingerPaths);\n\nconst rightStyle = { transform: `scale(-1, 1) translate(-100%)` };\n\nconst circleX = [23.891, 71.674, 119.456, 167.238, 215.021];\n\n// Export\n\ninterface Props<V> {\n  fingerPointing: (value: V) => boolean;\n  values: ReadonlyArray<V | undefined>;\n  onClick: (value: V) => void;\n  isRight: boolean;\n}\n\nconst Hand = <V extends unknown>(props: Props<V>): ReactElement => {\n  const { values, fingerPointing, isRight, onClick: onClickProp } = props;\n\n  const flipHand = isRight;\n  const indexes = isRight ? [4, 3, 2, 1, 0] : [0, 1, 2, 3, 4];\n\n  const isDisabled = (index: number) => values[index] === undefined;\n\n  const isPointing = (value: V) => fingerPointing(value);\n\n  const onClick = (value: V) => () => onClickProp(value);\n\n  return (\n    <svg\n      viewBox=\"0 0 239 360\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeMiterlimit={1.5}\n    >\n      <title>Hand</title>\n      <g>\n        <g>\n          {indexes.map((_, index) => {\n            const fName = fingers[index];\n            const value = values[index];\n            const onCircleClick = value ? onClick(value) : undefined;\n            return (\n              <Fragment key={index}>\n                <circle\n                  onMouseDown={onCircleClick}\n                  cx={circleX[index]}\n                  cy={20}\n                  r={17.474}\n                  className={\n                    value && isPointing(value) ? \"highlight\" : \"lowlight\"\n                  }\n                />\n                <circle\n                  onMouseDown={onCircleClick}\n                  cx={circleX[index]}\n                  cy={20}\n                  r={17.474}\n                  opacity={0}\n                  cursor=\"pointer\"\n                >\n                  <title>\n                    {fName} Finger {index}\n                  </title>\n                </circle>\n              </Fragment>\n            );\n          })}\n        </g>\n\n        {/* Hand */}\n        <g stroke=\"#000\" style={flipHand ? rightStyle : undefined}>\n          {/* Palm */}\n          <path d=\"M133.238 167.627l.123 3.721a4.409 4.409 0 004.406 4.262h.002a4.328 4.328 0 004.282-3.692l.525-3.526a121.092 121.092 0 0129.132 7.183l-.183 5.447a4.168 4.168 0 003.022 4.149s0 0 0 0a4.315 4.315 0 005.242-2.676l1.09-2.999a120.634 120.634 0 0122.046 13.658l-1.385 6.004a4.997 4.997 0 00-.129 1.156c.098 20.642 5.002 32.816 5.002 61.573 0 42.834-34.776 77.61-77.61 77.61-21.417 0-40.82-8.694-54.868-22.742-14.048-14.048-22.742-33.451-22.742-54.868 0-17.656 5.908-33.944 15.854-46.989l.361-14.975a4.74 4.74 0 00-.008-.43l-.955-15.4a119.832 119.832 0 0128.617-12.087l.447 2.55a5.001 5.001 0 006.01 4.017l.105-.023a5 5 0 003.912-4.723l.136-4.269c7.224-1.368 14.678-2.064 22.294-2.064l5.272.133z\" />\n          {/* Wrinkle */}\n          <path\n            d=\"M79.254 191.904c14.885-7.571 31.725-11.821 49.549-11.821 22.691 0 43.787 6.888 61.308 18.691\"\n            fill=\"none\"\n            strokeOpacity={0.2}\n          />\n          {indexes.map((vIndex, index) => {\n            const value = values[vIndex];\n            const fingerName = nameFromIndex(index);\n            const paths = fingerPaths[fingerName];\n            const pointing = value ? isPointing(value) : false;\n            const closed = !pointing;\n\n            const onFingerClick = value ? onClick(value) : undefined;\n\n            return (\n              <g\n                key={index}\n                onMouseDown={onFingerClick}\n                className={cn({ pointing, closed })}\n              >\n                <path d={paths[0]}>\n                  <title>\n                    {fingerName} Finger {value}\n                  </title>\n                </path>\n                <path d={paths[1]}>\n                  <title>\n                    {fingerName} Finger {value}\n                  </title>\n                </path>\n              </g>\n            );\n          })}\n        </g>\n\n        {/* Labels */}\n        <g>\n          {indexes.map((_, index) => {\n            const value = values[index] ? String(values[index]) : null;\n            return (\n              <text\n                opacity={isDisabled(index) ? 0.2 : 1}\n                key={index}\n                x={circleX[index]}\n                y={20}\n                fontFamily=\"sans-serif\"\n                fontSize={11}\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                pointerEvents=\"none\"\n              >\n                {value}\n              </text>\n            );\n          })}\n        </g>\n      </g>\n    </svg>\n  );\n};\n\nexport { Hand };\n","import React, { FC, Fragment, useState } from \"react\";\nimport { Hand } from \"./hand\";\nimport \"./hands.css\";\nimport { valuesForHand, valueToHandCount } from \"../lib/fingers\";\n\ninterface Props {\n  yours?: boolean;\n  maxValue?: number;\n  showInput?: boolean;\n  rightToLeft?: boolean;\n}\n\nconst Hands: FC<Props> = (props) => {\n  const { showInput, rightToLeft, yours, maxValue = 1023 } = props;\n\n  const [total, setTotal] = useState(maxValue);\n  const handCount = valueToHandCount(maxValue);\n\n  const onClick = (value: number) => {\n    const addValue = (total ^ value) > total;\n\n    setTotal((t) => {\n      const newValue = addValue ? t + value : t - value;\n      return newValue > maxValue ? t : newValue;\n    });\n  };\n\n  const fingerPointing = (value: number) => {\n    return (total & value) > 0;\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTotal(Number(e.target.value));\n  };\n\n  const hands = Array(handCount)\n    .fill(null)\n    .map((_, i) => i);\n\n  const setDirection = <V extends unknown>(array: Array<V>) => {\n    return rightToLeft ? [...array].reverse() : array;\n  };\n\n  return (\n    <section>\n      <article>\n        {setDirection(hands).map((handIndex, i) => {\n          const values = valuesForHand(handIndex);\n          const isRight = yours ? !(i % 2) : !!(i % 2);\n\n          return (\n            <Fragment key={handIndex}>\n              <Hand\n                key={handIndex}\n                isRight={isRight}\n                values={setDirection(values)}\n                fingerPointing={fingerPointing}\n                onClick={onClick}\n              />\n            </Fragment>\n          );\n        })}\n      </article>\n      {showInput && (\n        <footer>\n          <label>\n            <input\n              type=\"number\"\n              value={total}\n              onChange={onChange}\n              min={0}\n              max={maxValue}\n            />\n          </label>\n        </footer>\n      )}\n    </section>\n  );\n};\n\nexport { Hands };\n","import React from \"react\";\nimport \"./App.css\";\nimport { Hands } from \"./components/hands\";\n\nfunction App() {\n  const params = new URLSearchParams(document.location.search);\n\n  const showInput = params.get(\"showInput\") === \"1\";\n  const rightToLeft = params.get(\"rightToLeft\") === \"1\";\n  const maxValue = Number(params.get(\"maxValue\") ?? 1023);\n\n  const fill = params.get(\"fill\");\n  if (fill) {\n    document.documentElement.style.setProperty(\"--fill\", fill);\n  }\n\n  return (\n    <div className=\"App\">\n      <Hands\n        showInput={showInput}\n        maxValue={maxValue}\n        rightToLeft={rightToLeft}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}